.. include global.rst

``Image``
=========

Main methods
------------

.. autoclass:: pyvips.Image
   :members:
   :special-members:

   .. rubric:: Methods

   .. autoautosummary:: pyvips.Image
      :methods:

Attributes
---------- 

.. autosummary::
   :nosignatures:

   ~pyvips.Image.bands
   ~pyvips.Image.coding
   ~pyvips.Image.filename
   ~pyvips.Image.format
   ~pyvips.Image.height
   ~pyvips.Image.interpretation
   ~pyvips.Image.offset
   ~pyvips.Image.scale
   ~pyvips.Image.width
   ~pyvips.Image.xoffset
   ~pyvips.Image.xres
   ~pyvips.Image.yoffset
   ~pyvips.Image.yres

.. class:: pyvips.Image

   .. attribute:: width

      int, read-only: Image width in pixels.

   .. attribute:: height

      int, read-only: Image height in pixels.

   .. attribute:: bands

      int, read-only: Number of bands in image.

   .. attribute:: format

      :class:`.BandFormat`, read-only: Image format.

   .. attribute:: interpretation

      :class:`.Interpretation`, read-only: Suggested interpretation of 
      image pixel values.

   .. attribute:: coding

      :class:`.Coding`, read-only: Pixel coding. 

   .. attribute:: filename

      str, read-only: Filename image was loaded from, or None.

   .. attribute:: xoffset

      int, read-only: Image X offset.

   .. attribute:: yoffset

      int, read-only: Image Y offset.

   .. attribute:: xres

      float, read-only: Image X resolution, in pixels / mm

   .. attribute:: yres

      float, read-only: Image Y resolution, in pixels / mm.

   .. attribute:: scale

      float, read-only: Image scale.

   .. attribute:: offset

      float, read-only: Image offset.

Autogenerated methods
---------------------

.. class:: pyvips.Image

   .. rubric:: Methods

   .. autosummary::
      :nosignatures:

      ~CMC2LCh
      ~HSV2sRGB
      ~LCh2CMC
      ~LCh2Lab
      ~Lab2LCh
      ~Lab2LabQ
      ~Lab2LabS
      ~Lab2XYZ
      ~LabQ2Lab
      ~LabQ2LabS
      ~LabQ2sRGB
      ~LabS2Lab
      ~LabS2LabQ
      ~XYZ2Lab
      ~XYZ2Yxy
      ~XYZ2scRGB
      ~Yxy2XYZ
      ~abs
      ~add
      ~affine
      ~analyzeload
      ~arrayjoin
      ~autorot
      ~avg
      ~bandbool
      ~bandfold
      ~bandjoin_const
      ~bandmean
      ~bandunfold
      ~black
      ~boolean
      ~boolean_const
      ~buildlut
      ~byteswap
      ~cache
      ~cast
      ~colourspace
      ~compass
      ~complex
      ~complex2
      ~complexform
      ~complexget
      ~conv
      ~conva
      ~convasep
      ~convf
      ~convi
      ~convsep
      ~copy
      ~countlines
      ~csvload
      ~csvsave
      ~dE00
      ~dE76
      ~dECMC
      ~deviate
      ~divide
      ~draw_circle
      ~draw_flood
      ~draw_image
      ~draw_line
      ~draw_mask
      ~draw_rect
      ~draw_smudge
      ~dzsave
      ~dzsave_buffer
      ~embed
      ~extract_area
      ~extract_area
      ~extract_band
      ~eye
      ~falsecolour
      ~fastcor
      ~fitsload
      ~fitssave
      ~flatten
      ~flip
      ~float2rad
      ~fractsurf
      ~freqmult
      ~fwfft
      ~gamma
      ~gaussblur
      ~gaussmat
      ~gaussnoise
      ~getpoint
      ~gifload
      ~gifload_buffer
      ~globalbalance
      ~grey
      ~grid
      ~hist_cum
      ~hist_entropy
      ~hist_equal
      ~hist_find
      ~hist_find_indexed
      ~hist_find_ndim
      ~hist_ismonotonic
      ~hist_local
      ~hist_match
      ~hist_norm
      ~hist_plot
      ~hough_circle
      ~hough_line
      ~icc_export
      ~icc_import
      ~icc_transform
      ~identity
      ~insert
      ~invert
      ~invertlut
      ~invfft
      ~join
      ~jpegload
      ~jpegload_buffer
      ~jpegsave
      ~jpegsave_buffer
      ~jpegsave_mime
      ~labelregions
      ~linear
      ~linecache
      ~logmat
      ~magickload
      ~magickload_buffer
      ~mapim
      ~maplut
      ~mask_butterworth
      ~mask_butterworth_band
      ~mask_butterworth_ring
      ~mask_fractal
      ~mask_gaussian
      ~mask_gaussian_band
      ~mask_gaussian_ring
      ~mask_ideal
      ~mask_ideal_band
      ~mask_ideal_ring
      ~match
      ~math
      ~math2
      ~math2_const
      ~matload
      ~matrixload
      ~matrixprint
      ~matrixsave
      ~max
      ~measure
      ~merge
      ~min
      ~morph
      ~mosaic
      ~mosaic1
      ~msb
      ~multiply
      ~openexrload
      ~openslideload
      ~pdfload
      ~pdfload_buffer
      ~percent
      ~perlin
      ~phasecor
      ~pngload
      ~pngload_buffer
      ~pngsave
      ~pngsave_buffer
      ~ppmload
      ~ppmsave
      ~premultiply
      ~profile
      ~project
      ~quadratic
      ~rad2float
      ~radload
      ~radsave
      ~radsave_buffer
      ~rank
      ~rawload
      ~rawsave
      ~rawsave_fd
      ~recomb
      ~reduce
      ~reduceh
      ~reducev
      ~relational
      ~relational_const
      ~remainder
      ~remainder_const
      ~replicate
      ~resize
      ~rot
      ~rot45
      ~round
      ~sRGB2HSV
      ~sRGB2scRGB
      ~scRGB2BW
      ~scRGB2XYZ
      ~scRGB2sRGB
      ~sequential
      ~sharpen
      ~shrink
      ~shrinkh
      ~shrinkv
      ~sign
      ~similarity
      ~sines
      ~smartcrop
      ~spcor
      ~spectrum
      ~stats
      ~stdif
      ~subsample
      ~subtract
      ~sum
      ~svgload
      ~svgload
      ~svgload_buffer
      ~system
      ~text
      ~thumbnail
      ~thumbnail_buffer
      ~tiffload
      ~tiffload_buffer
      ~tiffsave
      ~tiffsave_buffer
      ~tilecache
      ~tonelut
      ~unpremultiply
      ~vipsload
      ~vipssave
      ~webpload
      ~webpload_buffer
      ~webpsave
      ~webpsave_buffer
      ~worley
      ~wrap
      ~xyz
      ~zone
      ~zoom


   .. method:: CMC2LCh()
      
      Transform LCh to CMC.
      
      Example:
          out = in.CMC2LCh()
      
      :rtype: Image
      :raises Error:
      
   .. method:: HSV2sRGB()
      
      Transform HSV to sRGB.
      
      Example:
          out = in.HSV2sRGB()
      
      :rtype: Image
      :raises Error:
      
   .. method:: LCh2CMC()
      
      Transform LCh to CMC.
      
      Example:
          out = in.LCh2CMC()
      
      :rtype: Image
      :raises Error:
      
   .. method:: LCh2Lab()
      
      Transform LCh to Lab.
      
      Example:
          out = in.LCh2Lab()
      
      :rtype: Image
      :raises Error:
      
   .. method:: Lab2LCh()
      
      Transform Lab to LCh.
      
      Example:
          out = in.Lab2LCh()
      
      :rtype: Image
      :raises Error:
      
   .. method:: Lab2LabQ()
      
      Transform float Lab to LabQ coding.
      
      Example:
          out = in.Lab2LabQ()
      
      :rtype: Image
      :raises Error:
      
   .. method:: Lab2LabS()
      
      Transform float Lab to signed short.
      
      Example:
          out = in.Lab2LabS()
      
      :rtype: Image
      :raises Error:
      
   .. method:: Lab2XYZ(temp = list[float])
      
      Transform CIELAB to XYZ.
      
      Example:
          out = in.Lab2XYZ(temp = list[float])
      
      :param list[float] temp: Color temperature
      :rtype: Image
      :raises Error:
      
   .. method:: LabQ2Lab()
      
      Unpack a LabQ image to float Lab.
      
      Example:
          out = in.LabQ2Lab()
      
      :rtype: Image
      :raises Error:
      
   .. method:: LabQ2LabS()
      
      Unpack a LabQ image to short Lab.
      
      Example:
          out = in.LabQ2LabS()
      
      :rtype: Image
      :raises Error:
      
   .. method:: LabQ2sRGB()
      
      Convert a LabQ image to sRGB.
      
      Example:
          out = in.LabQ2sRGB()
      
      :rtype: Image
      :raises Error:
      
   .. method:: LabS2Lab()
      
      Transform signed short Lab to float.
      
      Example:
          out = in.LabS2Lab()
      
      :rtype: Image
      :raises Error:
      
   .. method:: LabS2LabQ()
      
      Transform short Lab to LabQ coding.
      
      Example:
          out = in.LabS2LabQ()
      
      :rtype: Image
      :raises Error:
      
   .. method:: XYZ2Lab(temp = list[float])
      
      Transform XYZ to Lab.
      
      Example:
          out = in.XYZ2Lab(temp = list[float])
      
      :param list[float] temp: Colour temperature
      :rtype: Image
      :raises Error:
      
   .. method:: XYZ2Yxy()
      
      Transform XYZ to Yxy.
      
      Example:
          out = in.XYZ2Yxy()
      
      :rtype: Image
      :raises Error:
      
   .. method:: XYZ2scRGB()
      
      Transform XYZ to scRGB.
      
      Example:
          out = in.XYZ2scRGB()
      
      :rtype: Image
      :raises Error:
      
   .. method:: Yxy2XYZ()
      
      Transform Yxy to XYZ.
      
      Example:
          out = in.Yxy2XYZ()
      
      :rtype: Image
      :raises Error:
      
   .. method:: abs()
      
      Absolute value of an image.
      
      Example:
          out = in.abs()
      
      :rtype: Image
      :raises Error:
      
   .. method:: add(right)
      
      Add two images.
      
      Example:
          out = left.add(right)
      
      :param Image right: Right-hand image argument
      :rtype: Image
      :raises Error:
      
   .. method:: affine(matrix, interpolate = GObject, oarea = list[int], odx = float, ody = float, idx = float, idy = float)
      
      Affine transform of an image.
      
      Example:
          out = in.affine(matrix, interpolate = GObject, oarea = list[int], odx = float, ody = float, idx = float, idy = float)
      
      :param list[float] matrix: Transformation matrix
      :param GObject interpolate: Interpolate pixels with this
      :param list[int] oarea: Area of output to generate
      :param float odx: Horizontal output displacement
      :param float ody: Vertical output displacement
      :param float idx: Horizontal input displacement
      :param float idy: Vertical input displacement
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: analyzeload(filename, disc = bool, access = str, fail = bool)
      
      Load an Analyze6 image.
      
      Example:
          out = pyvips.Image.analyzeload(filename, disc = bool, access = str, fail = bool)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param bool fail: Fail on first error
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. staticmethod:: arrayjoin(in, across = int, shim = int, background = list[float], halign = str, valign = str, hspacing = int, vspacing = int)
      
      Join an array of images.
      
      Example:
          out = pyvips.Image.arrayjoin(in, across = int, shim = int, background = list[float], halign = str, valign = str, hspacing = int, vspacing = int)
      
      :param list[Image] in: Array of input images
      :param int across: Number of images across grid
      :param int shim: Pixels between images
      :param list[float] background: Colour for new pixels
      :param str halign: Align on the left, centre or right
      :param str valign: Align on the top, centre or bottom
      :param int hspacing: Horizontal spacing between images
      :param int vspacing: Vertical spacing between images
      :rtype: Image
      :raises Error:
      
   .. method:: autorot()
      
      Autorotate image by exif tag.
      
      Example:
          out = in.autorot()
      
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: avg()
      
      Find image average.
      
      Example:
          out = in.avg()
      
      :rtype: float
      :raises Error:
      
   .. method:: bandbool(boolean)
      
      Boolean operation across image bands.
      
      Example:
          out = in.bandbool(boolean)
      
      :param str boolean: boolean to perform
      :rtype: Image
      :raises Error:
      
   .. method:: bandfold(factor = int)
      
      Fold up x axis into bands.
      
      Example:
          out = in.bandfold(factor = int)
      
      :param int factor: Fold by this factor
      :rtype: Image
      :raises Error:
      
   .. method:: bandjoin_const(c)
      
      Append a constant band to an image.
      
      Example:
          out = in.bandjoin_const(c)
      
      :param list[float] c: Array of constants to add
      :rtype: Image
      :raises Error:
      
   .. method:: bandmean()
      
      Band-wise average.
      
      Example:
          out = in.bandmean()
      
      :rtype: Image
      :raises Error:
      
   .. method:: bandunfold(factor = int)
      
      Unfold image bands into x axis.
      
      Example:
          out = in.bandunfold(factor = int)
      
      :param int factor: Unfold by this factor
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: black(width, height, bands = int)
      
      Make a black image.
      
      Example:
          out = pyvips.Image.black(width, height, bands = int)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param int bands: Number of bands in image
      :rtype: Image
      :raises Error:
      
   .. method:: boolean(right, boolean)
      
      Boolean operation on two images.
      
      Example:
          out = left.boolean(right, boolean)
      
      :param Image right: Right-hand image argument
      :param str boolean: boolean to perform
      :rtype: Image
      :raises Error:
      
   .. method:: boolean_const(boolean, c)
      
      Boolean operations against a constant.
      
      Example:
          out = in.boolean_const(boolean, c)
      
      :param str boolean: boolean to perform
      :param list[float] c: Array of constants
      :rtype: Image
      :raises Error:
      
   .. method:: buildlut()
      
      Build a look-up table.
      
      Example:
          out = in.buildlut()
      
      :rtype: Image
      :raises Error:
      
   .. method:: byteswap()
      
      Byteswap an image.
      
      Example:
          out = in.byteswap()
      
      :rtype: Image
      :raises Error:
      
   .. method:: cache(max_tiles = int, tile_height = int, tile_width = int)
      
      Cache an image.
      
      Example:
          out = in.cache(max_tiles = int, tile_height = int, tile_width = int)
      
      :param int max_tiles: Maximum number of tiles to cache
      :param int tile_height: Tile height in pixels
      :param int tile_width: Tile width in pixels
      :rtype: Image
      :raises Error:
      
   .. method:: cast(format, shift = bool)
      
      Cast an image.
      
      Example:
          out = in.cast(format, shift = bool)
      
      :param str format: Format to cast to
      :param bool shift: Shift integer values up and down
      :rtype: Image
      :raises Error:
      
   .. method:: colourspace(space, source_space = str)
      
      Convert to a new colorspace.
      
      Example:
          out = in.colourspace(space, source_space = str)
      
      :param str space: Destination color space
      :param str source_space: Source color space
      :rtype: Image
      :raises Error:
      
   .. method:: compass(mask, times = int, angle = str, combine = str, precision = str, layers = int, cluster = int)
      
      Convolve with rotating mask.
      
      Example:
          out = in.compass(mask, times = int, angle = str, combine = str, precision = str, layers = int, cluster = int)
      
      :param Image mask: Input matrix image
      :param int times: Rotate and convolve this many times
      :param str angle: Rotate mask by this much between convolutions
      :param str combine: Combine convolution results like this
      :param str precision: Convolve with this precision
      :param int layers: Use this many layers in approximation
      :param int cluster: Cluster lines closer than this in approximation
      :rtype: Image
      :raises Error:
      
   .. method:: complex(cmplx)
      
      Perform a complex operation on an image.
      
      Example:
          out = in.complex(cmplx)
      
      :param str cmplx: complex to perform
      :rtype: Image
      :raises Error:
      
   .. method:: complex2(right, cmplx)
      
      Complex binary operations on two images.
      
      Example:
          out = left.complex2(right, cmplx)
      
      :param Image right: Right-hand image argument
      :param str cmplx: binary complex operation to perform
      :rtype: Image
      :raises Error:
      
   .. method:: complexform(right)
      
      Form a complex image from two real images.
      
      Example:
          out = left.complexform(right)
      
      :param Image right: Right-hand image argument
      :rtype: Image
      :raises Error:
      
   .. method:: complexget(get)
      
      Get a component from a complex image.
      
      Example:
          out = in.complexget(get)
      
      :param str get: complex to perform
      :rtype: Image
      :raises Error:
      
   .. method:: conv(mask, precision = str, layers = int, cluster = int)
      
      Convolution operation.
      
      Example:
          out = in.conv(mask, precision = str, layers = int, cluster = int)
      
      :param Image mask: Input matrix image
      :param str precision: Convolve with this precision
      :param int layers: Use this many layers in approximation
      :param int cluster: Cluster lines closer than this in approximation
      :rtype: Image
      :raises Error:
      
   .. method:: conva(mask, layers = int, cluster = int)
      
      Approximate integer convolution.
      
      Example:
          out = in.conva(mask, layers = int, cluster = int)
      
      :param Image mask: Input matrix image
      :param int layers: Use this many layers in approximation
      :param int cluster: Cluster lines closer than this in approximation
      :rtype: Image
      :raises Error:
      
   .. method:: convasep(mask, layers = int)
      
      Approximate separable integer convolution.
      
      Example:
          out = in.convasep(mask, layers = int)
      
      :param Image mask: Input matrix image
      :param int layers: Use this many layers in approximation
      :rtype: Image
      :raises Error:
      
   .. method:: convf(mask)
      
      Float convolution operation.
      
      Example:
          out = in.convf(mask)
      
      :param Image mask: Input matrix image
      :rtype: Image
      :raises Error:
      
   .. method:: convi(mask)
      
      Int convolution operation.
      
      Example:
          out = in.convi(mask)
      
      :param Image mask: Input matrix image
      :rtype: Image
      :raises Error:
      
   .. method:: convsep(mask, precision = str, layers = int, cluster = int)
      
      Seperable convolution operation.
      
      Example:
          out = in.convsep(mask, precision = str, layers = int, cluster = int)
      
      :param Image mask: Input matrix image
      :param str precision: Convolve with this precision
      :param int layers: Use this many layers in approximation
      :param int cluster: Cluster lines closer than this in approximation
      :rtype: Image
      :raises Error:
      
   .. method:: copy(width = int, height = int, bands = int, format = str, coding = str, interpretation = str, xres = float, yres = float, xoffset = int, yoffset = int)
      
      Copy an image.
      
      Example:
          out = in.copy(width = int, height = int, bands = int, format = str, coding = str, interpretation = str, xres = float, yres = float, xoffset = int, yoffset = int)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param int bands: Number of bands in image
      :param str format: Pixel format in image
      :param str coding: Pixel coding
      :param str interpretation: Pixel interpretation
      :param float xres: Horizontal resolution in pixels/mm
      :param float yres: Vertical resolution in pixels/mm
      :param int xoffset: Horizontal offset of origin
      :param int yoffset: Vertical offset of origin
      :rtype: Image
      :raises Error:
      
   .. method:: countlines(direction)
      
      Count lines in an image.
      
      Example:
          nolines = in.countlines(direction)
      
      :param str direction: Countlines left-right or up-down
      :rtype: float
      :raises Error:
      
   .. staticmethod:: csvload(filename, disc = bool, access = str, skip = int, lines = int, fail = bool, whitespace = str, separator = str)
      
      Load csv from file.
      
      Example:
          out = pyvips.Image.csvload(filename, disc = bool, access = str, skip = int, lines = int, fail = bool, whitespace = str, separator = str)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param int skip: Skip this many lines at the start of the file
      :param int lines: Read this many lines from the file
      :param bool fail: Fail on first error
      :param str whitespace: Set of whitespace characters
      :param str separator: Set of separator characters
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: csvsave(filename, separator = str, strip = bool, background = list[float])
      
      Save image to csv file.
      
      Example:
           = in.csvsave(filename, separator = str, strip = bool, background = list[float])
      
      :param str filename: Filename to save to
      :param str separator: Separator characters
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: list[]
      :raises Error:
      
   .. method:: dE00(right)
      
      Calculate dE00.
      
      Example:
          out = left.dE00(right)
      
      :param Image right: Right-hand input image
      :rtype: Image
      :raises Error:
      
   .. method:: dE76(right)
      
      Calculate dE76.
      
      Example:
          out = left.dE76(right)
      
      :param Image right: Right-hand input image
      :rtype: Image
      :raises Error:
      
   .. method:: dECMC(right)
      
      Calculate dECMC.
      
      Example:
          out = left.dECMC(right)
      
      :param Image right: Right-hand input image
      :rtype: Image
      :raises Error:
      
   .. method:: deviate()
      
      Find image standard deviation.
      
      Example:
          out = in.deviate()
      
      :rtype: float
      :raises Error:
      
   .. method:: divide(right)
      
      Divide two images.
      
      Example:
          out = left.divide(right)
      
      :param Image right: Right-hand image argument
      :rtype: Image
      :raises Error:
      
   .. method:: draw_circle(ink, cx, cy, radius, fill = bool)
      
      Draw a circle on an image.
      
      Example:
          image = image.draw_circle(ink, cx, cy, radius, fill = bool)
      
      :param list[float] ink: Color for pixels
      :param int cx: Centre of draw_circle
      :param int cy: Centre of draw_circle
      :param int radius: Radius in pixels
      :param bool fill: Draw a solid object
      :rtype: Image
      :raises Error:
      
   .. method:: draw_flood(ink, x, y, test = Image, equal = bool)
      
      Flood-fill an area.
      
      Example:
          image = image.draw_flood(ink, x, y, test = Image, equal = bool)
      
      :param list[float] ink: Color for pixels
      :param int x: DrawFlood start point
      :param int y: DrawFlood start point
      :param Image test: Test pixels in this image
      :param bool equal: DrawFlood while equal to edge
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: draw_image(sub, x, y, mode = str)
      
      Paint an image into another image.
      
      Example:
          image = image.draw_image(sub, x, y, mode = str)
      
      :param Image sub: Sub-image to insert into main image
      :param int x: Draw image here
      :param int y: Draw image here
      :param str mode: Combining mode
      :rtype: Image
      :raises Error:
      
   .. method:: draw_line(ink, x1, y1, x2, y2)
      
      Draw a line on an image.
      
      Example:
          image = image.draw_line(ink, x1, y1, x2, y2)
      
      :param list[float] ink: Color for pixels
      :param int x1: Start of draw_line
      :param int y1: Start of draw_line
      :param int x2: End of draw_line
      :param int y2: End of draw_line
      :rtype: Image
      :raises Error:
      
   .. method:: draw_mask(ink, mask, x, y)
      
      Draw a mask on an image.
      
      Example:
          image = image.draw_mask(ink, mask, x, y)
      
      :param list[float] ink: Color for pixels
      :param Image mask: Mask of pixels to draw
      :param int x: Draw mask here
      :param int y: Draw mask here
      :rtype: Image
      :raises Error:
      
   .. method:: draw_rect(ink, left, top, width, height, fill = bool)
      
      Paint a rectangle on an image.
      
      Example:
          image = image.draw_rect(ink, left, top, width, height, fill = bool)
      
      :param list[float] ink: Color for pixels
      :param int left: Rect to fill
      :param int top: Rect to fill
      :param int width: Rect to fill
      :param int height: Rect to fill
      :param bool fill: Draw a solid object
      :rtype: Image
      :raises Error:
      
   .. method:: draw_smudge(left, top, width, height)
      
      Blur a rectangle on an image.
      
      Example:
          image = image.draw_smudge(left, top, width, height)
      
      :param int left: Rect to fill
      :param int top: Rect to fill
      :param int width: Rect to fill
      :param int height: Rect to fill
      :rtype: Image
      :raises Error:
      
   .. method:: dzsave(filename, basename = str, layout = str, suffix = str, overlap = int, tile_size = int, centre = bool, depth = str, angle = str, container = str, properties = bool, compression = int, strip = bool, background = list[float])
      
      Save image to deepzoom file.
      
      Example:
           = in.dzsave(filename, basename = str, layout = str, suffix = str, overlap = int, tile_size = int, centre = bool, depth = str, angle = str, container = str, properties = bool, compression = int, strip = bool, background = list[float])
      
      :param str filename: Filename to save to
      :param str basename: Base name to save to
      :param str layout: Directory layout
      :param str suffix: Filename suffix for tiles
      :param int overlap: Tile overlap in pixels
      :param int tile_size: Tile size in pixels
      :param bool centre: Center image in tile
      :param str depth: Pyramid depth
      :param str angle: Rotate image during save
      :param str container: Pyramid container type
      :param bool properties: Write a properties file to the output directory
      :param int compression: ZIP deflate compression level
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: list[]
      :raises Error:
      
   .. method:: dzsave_buffer(basename = str, layout = str, suffix = str, overlap = int, tile_size = int, centre = bool, depth = str, angle = str, container = str, properties = bool, compression = int, strip = bool, background = list[float])
      
      Save image to dz buffer.
      
      Example:
          buffer = in.dzsave_buffer(basename = str, layout = str, suffix = str, overlap = int, tile_size = int, centre = bool, depth = str, angle = str, container = str, properties = bool, compression = int, strip = bool, background = list[float])
      
      :param str basename: Base name to save to
      :param str layout: Directory layout
      :param str suffix: Filename suffix for tiles
      :param int overlap: Tile overlap in pixels
      :param int tile_size: Tile size in pixels
      :param bool centre: Center image in tile
      :param str depth: Pyramid depth
      :param str angle: Rotate image during save
      :param str container: Pyramid container type
      :param bool properties: Write a properties file to the output directory
      :param int compression: ZIP deflate compression level
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: str
      :raises Error:
      
   .. method:: embed(x, y, width, height, extend = str, background = list[float])
      
      Embed an image in a larger image.
      
      Example:
          out = in.embed(x, y, width, height, extend = str, background = list[float])
      
      :param int x: Left edge of input in output
      :param int y: Top edge of input in output
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param str extend: How to generate the extra pixels
      :param list[float] background: Color for background pixels
      :rtype: Image
      :raises Error:
      
   .. method:: extract_area(left, top, width, height)
      
      Extract an area from an image.
      
      Example:
          out = input.extract_area(left, top, width, height)
      
      :param int left: Left edge of extract area
      :param int top: Top edge of extract area
      :param int width: Width of extract area
      :param int height: Height of extract area
      :rtype: Image
      :raises Error:
      
   .. method:: extract_area(left, top, width, height)
      
      Extract an area from an image.
      
      Example:
          out = input.extract_area(left, top, width, height)
      
      :param int left: Left edge of extract area
      :param int top: Top edge of extract area
      :param int width: Width of extract area
      :param int height: Height of extract area
      :rtype: Image
      :raises Error:
      
   .. method:: extract_band(band, n = int)
      
      Extract band from an image.
      
      Example:
          out = in.extract_band(band, n = int)
      
      :param int band: Band to extract
      :param int n: Number of bands to extract
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: eye(width, height, uchar = bool, factor = float)
      
      Make an image showing the eye's spatial response.
      
      Example:
          out = pyvips.Image.eye(width, height, uchar = bool, factor = float)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param bool uchar: Output an unsigned char image
      :param float factor: Maximum spatial frequency
      :rtype: Image
      :raises Error:
      
   .. method:: falsecolour()
      
      False-color an image.
      
      Example:
          out = in.falsecolour()
      
      :rtype: Image
      :raises Error:
      
   .. method:: fastcor(ref)
      
      Fast correlation.
      
      Example:
          out = in.fastcor(ref)
      
      :param Image ref: Input reference image
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: fitsload(filename, disc = bool, access = str, fail = bool)
      
      Load a FITS image.
      
      Example:
          out = pyvips.Image.fitsload(filename, disc = bool, access = str, fail = bool)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param bool fail: Fail on first error
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: fitssave(filename, strip = bool, background = list[float])
      
      Save image to fits file.
      
      Example:
           = in.fitssave(filename, strip = bool, background = list[float])
      
      :param str filename: Filename to save to
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: list[]
      :raises Error:
      
   .. method:: flatten(background = list[float], max_alpha = float)
      
      Flatten alpha out of an image.
      
      Example:
          out = in.flatten(background = list[float], max_alpha = float)
      
      :param list[float] background: Background value
      :param float max_alpha: Maximum value of alpha channel
      :rtype: Image
      :raises Error:
      
   .. method:: flip(direction)
      
      Flip an image.
      
      Example:
          out = in.flip(direction)
      
      :param str direction: Direction to flip image
      :rtype: Image
      :raises Error:
      
   .. method:: float2rad()
      
      Transform float RGB to Radiance coding.
      
      Example:
          out = in.float2rad()
      
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: fractsurf(width, height, fractal_dimension)
      
      Make a fractal surface.
      
      Example:
          out = pyvips.Image.fractsurf(width, height, fractal_dimension)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param float fractal_dimension: Fractal dimension
      :rtype: Image
      :raises Error:
      
   .. method:: freqmult(mask)
      
      Frequency-domain filtering.
      
      Example:
          out = in.freqmult(mask)
      
      :param Image mask: Input mask image
      :rtype: Image
      :raises Error:
      
   .. method:: fwfft()
      
      Forward FFT.
      
      Example:
          out = in.fwfft()
      
      :rtype: Image
      :raises Error:
      
   .. method:: gamma(exponent = float)
      
      Gamma an image.
      
      Example:
          out = in.gamma(exponent = float)
      
      :param float exponent: Gamma factor
      :rtype: Image
      :raises Error:
      
   .. method:: gaussblur(sigma, min_ampl = float, precision = str)
      
      Gaussian blur.
      
      Example:
          out = in.gaussblur(sigma, min_ampl = float, precision = str)
      
      :param float sigma: Sigma of Gaussian
      :param float min_ampl: Minimum amplitude of Gaussian
      :param str precision: Convolve with this precision
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: gaussmat(sigma, min_ampl, separable = bool, precision = str)
      
      Make a gaussian image.
      
      Example:
          out = pyvips.Image.gaussmat(sigma, min_ampl, separable = bool, precision = str)
      
      :param float sigma: Sigma of Gaussian
      :param float min_ampl: Minimum amplitude of Gaussian
      :param bool separable: Generate separable Gaussian
      :param str precision: Generate with this precision
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: gaussnoise(width, height, sigma = float, mean = float)
      
      Make a gaussnoise image.
      
      Example:
          out = pyvips.Image.gaussnoise(width, height, sigma = float, mean = float)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param float sigma: Standard deviation of pixels in generated image
      :param float mean: Mean of pixels in generated image
      :rtype: Image
      :raises Error:
      
   .. method:: getpoint(x, y)
      
      Read a point from an image.
      
      Example:
          out_array = in.getpoint(x, y)
      
      :param int x: Point to read
      :param int y: Point to read
      :rtype: list[float]
      :raises Error:
      
   .. staticmethod:: gifload(filename, n = int, disc = bool, access = str, page = int, fail = bool)
      
      Load GIF with giflib.
      
      Example:
          out = pyvips.Image.gifload(filename, n = int, disc = bool, access = str, page = int, fail = bool)
      
      :param str filename: Filename to load from
      :param int n: Load this many pages
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param int page: Load this page from the file
      :param bool fail: Fail on first error
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. staticmethod:: gifload_buffer(buffer, n = int, disc = bool, access = str, page = int, fail = bool)
      
      Load GIF with giflib.
      
      Example:
          out = pyvips.Image.gifload_buffer(buffer, n = int, disc = bool, access = str, page = int, fail = bool)
      
      :param str buffer: Buffer to load from
      :param int n: Load this many pages
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param int page: Load this page from the file
      :param bool fail: Fail on first error
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: globalbalance(gamma = float, int_output = bool)
      
      Global balance an image mosaic.
      
      Example:
          out = in.globalbalance(gamma = float, int_output = bool)
      
      :param float gamma: Image gamma
      :param bool int_output: Integer output
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: grey(width, height, uchar = bool)
      
      Make a grey ramp image.
      
      Example:
          out = pyvips.Image.grey(width, height, uchar = bool)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param bool uchar: Output an unsigned char image
      :rtype: Image
      :raises Error:
      
   .. method:: grid(tile_height, across, down)
      
      Grid an image.
      
      Example:
          out = in.grid(tile_height, across, down)
      
      :param int tile_height: chop into tiles this high
      :param int across: number of tiles across
      :param int down: number of tiles down
      :rtype: Image
      :raises Error:
      
   .. method:: hist_cum()
      
      Form cumulative histogram.
      
      Example:
          out = in.hist_cum()
      
      :rtype: Image
      :raises Error:
      
   .. method:: hist_entropy()
      
      Estimate image entropy.
      
      Example:
          out = in.hist_entropy()
      
      :rtype: float
      :raises Error:
      
   .. method:: hist_equal(band = int)
      
      Histogram equalisation.
      
      Example:
          out = in.hist_equal(band = int)
      
      :param int band: Equalise with this band
      :rtype: Image
      :raises Error:
      
   .. method:: hist_find(band = int)
      
      Find image histogram.
      
      Example:
          out = in.hist_find(band = int)
      
      :param int band: Find histogram of band
      :rtype: Image
      :raises Error:
      
   .. method:: hist_find_indexed(index)
      
      Find indexed image histogram.
      
      Example:
          out = in.hist_find_indexed(index)
      
      :param Image index: Index image
      :rtype: Image
      :raises Error:
      
   .. method:: hist_find_ndim(bins = int)
      
      Find n-dimensional image histogram.
      
      Example:
          out = in.hist_find_ndim(bins = int)
      
      :param int bins: Number of bins in each dimension
      :rtype: Image
      :raises Error:
      
   .. method:: hist_ismonotonic()
      
      Test for monotonicity.
      
      Example:
          monotonic = in.hist_ismonotonic()
      
      :rtype: bool
      :raises Error:
      
   .. method:: hist_local(width, height, max_slope = int)
      
      Local histogram equalisation.
      
      Example:
          out = in.hist_local(width, height, max_slope = int)
      
      :param int width: Window width in pixels
      :param int height: Window height in pixels
      :param int max_slope: Maximum slope (CLAHE)
      :rtype: Image
      :raises Error:
      
   .. method:: hist_match(ref)
      
      Match two histograms.
      
      Example:
          out = in.hist_match(ref)
      
      :param Image ref: Reference histogram
      :rtype: Image
      :raises Error:
      
   .. method:: hist_norm()
      
      Normalise histogram.
      
      Example:
          out = in.hist_norm()
      
      :rtype: Image
      :raises Error:
      
   .. method:: hist_plot()
      
      Plot histogram.
      
      Example:
          out = in.hist_plot()
      
      :rtype: Image
      :raises Error:
      
   .. method:: hough_circle(scale = int, min_radius = int, max_radius = int)
      
      Find hough circle transform.
      
      Example:
          out = in.hough_circle(scale = int, min_radius = int, max_radius = int)
      
      :param int scale: Scale down dimensions by this factor
      :param int min_radius: Smallest radius to search for
      :param int max_radius: Largest radius to search for
      :rtype: Image
      :raises Error:
      
   .. method:: hough_line(width = int, height = int)
      
      Find hough line transform.
      
      Example:
          out = in.hough_line(width = int, height = int)
      
      :param int width: horizontal size of parameter space
      :param int height: Vertical size of parameter space
      :rtype: Image
      :raises Error:
      
   .. method:: icc_export(pcs = str, intent = str, output_profile = str, depth = int)
      
      Output to device with ICC profile.
      
      Example:
          out = in.icc_export(pcs = str, intent = str, output_profile = str, depth = int)
      
      :param str pcs: Set Profile Connection Space
      :param str intent: Rendering intent
      :param str output_profile: Filename to load output profile from
      :param int depth: Output device space depth in bits
      :rtype: Image
      :raises Error:
      
   .. method:: icc_import(pcs = str, intent = str, embedded = bool, input_profile = str)
      
      Import from device with ICC profile.
      
      Example:
          out = in.icc_import(pcs = str, intent = str, embedded = bool, input_profile = str)
      
      :param str pcs: Set Profile Connection Space
      :param str intent: Rendering intent
      :param bool embedded: Use embedded input profile, if available
      :param str input_profile: Filename to load input profile from
      :rtype: Image
      :raises Error:
      
   .. method:: icc_transform(output_profile, pcs = str, intent = str, embedded = bool, input_profile = str, depth = int)
      
      Transform between devices with ICC profiles.
      
      Example:
          out = in.icc_transform(output_profile, pcs = str, intent = str, embedded = bool, input_profile = str, depth = int)
      
      :param str output_profile: Filename to load output profile from
      :param str pcs: Set Profile Connection Space
      :param str intent: Rendering intent
      :param bool embedded: Use embedded input profile, if available
      :param str input_profile: Filename to load input profile from
      :param int depth: Output device space depth in bits
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: identity(bands = int, ushort = bool, size = int)
      
      Make a 1D image where pixel values are indexes.
      
      Example:
          out = pyvips.Image.identity(bands = int, ushort = bool, size = int)
      
      :param int bands: Number of bands in LUT
      :param bool ushort: Create a 16-bit LUT
      :param int size: Size of 16-bit LUT
      :rtype: Image
      :raises Error:
      
   .. method:: insert(sub, x, y, expand = bool, background = list[float])
      
      Insert image @sub into @main at @x, @y.
      
      Example:
          out = main.insert(sub, x, y, expand = bool, background = list[float])
      
      :param Image sub: Sub-image to insert into main image
      :param int x: Left edge of sub in main
      :param int y: Top edge of sub in main
      :param bool expand: Expand output to hold all of both inputs
      :param list[float] background: Color for new pixels
      :rtype: Image
      :raises Error:
      
   .. method:: invert()
      
      Invert an image.
      
      Example:
          out = in.invert()
      
      :rtype: Image
      :raises Error:
      
   .. method:: invertlut(size = int)
      
      Build an inverted look-up table.
      
      Example:
          out = in.invertlut(size = int)
      
      :param int size: LUT size to generate
      :rtype: Image
      :raises Error:
      
   .. method:: invfft(real = bool)
      
      Inverse FFT.
      
      Example:
          out = in.invfft(real = bool)
      
      :param bool real: Output only the real part of the transform
      :rtype: Image
      :raises Error:
      
   .. method:: join(in2, direction, expand = bool, shim = int, background = list[float], align = str)
      
      Join a pair of images.
      
      Example:
          out = in1.join(in2, direction, expand = bool, shim = int, background = list[float], align = str)
      
      :param Image in2: Second input image
      :param str direction: Join left-right or up-down
      :param bool expand: Expand output to hold all of both inputs
      :param int shim: Pixels between images
      :param list[float] background: Colour for new pixels
      :param str align: Align on the low, centre or high coordinate edge
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: jpegload(filename, disc = bool, access = str, shrink = int, fail = bool, autorotate = bool)
      
      Load jpeg from file.
      
      Example:
          out = pyvips.Image.jpegload(filename, disc = bool, access = str, shrink = int, fail = bool, autorotate = bool)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param int shrink: Shrink factor on load
      :param bool fail: Fail on first error
      :param bool autorotate: Rotate image using exif orientation
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. staticmethod:: jpegload_buffer(buffer, disc = bool, access = str, shrink = int, fail = bool, autorotate = bool)
      
      Load jpeg from buffer.
      
      Example:
          out = pyvips.Image.jpegload_buffer(buffer, disc = bool, access = str, shrink = int, fail = bool, autorotate = bool)
      
      :param str buffer: Buffer to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param int shrink: Shrink factor on load
      :param bool fail: Fail on first error
      :param bool autorotate: Rotate image using exif orientation
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: jpegsave(filename, Q = int, profile = str, optimize_coding = bool, interlace = bool, no_subsample = bool, trellis_quant = bool, overshoot_deringing = bool, optimize_scans = bool, quant_table = int, strip = bool, background = list[float])
      
      Save image to jpeg file.
      
      Example:
           = in.jpegsave(filename, Q = int, profile = str, optimize_coding = bool, interlace = bool, no_subsample = bool, trellis_quant = bool, overshoot_deringing = bool, optimize_scans = bool, quant_table = int, strip = bool, background = list[float])
      
      :param str filename: Filename to save to
      :param int Q: Q factor
      :param str profile: ICC profile to embed
      :param bool optimize_coding: Compute optimal Huffman coding tables
      :param bool interlace: Generate an interlaced (progressive) jpeg
      :param bool no_subsample: Disable chroma subsample
      :param bool trellis_quant: Apply trellis quantisation to each 8x8 block
      :param bool overshoot_deringing: Apply overshooting to samples with extreme values
      :param bool optimize_scans: Split the spectrum of DCT coefficients into separate scans
      :param int quant_table: Use predefined quantization table with given index
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: list[]
      :raises Error:
      
   .. method:: jpegsave_buffer(Q = int, profile = str, optimize_coding = bool, interlace = bool, no_subsample = bool, trellis_quant = bool, overshoot_deringing = bool, optimize_scans = bool, quant_table = int, strip = bool, background = list[float])
      
      Save image to jpeg buffer.
      
      Example:
          buffer = in.jpegsave_buffer(Q = int, profile = str, optimize_coding = bool, interlace = bool, no_subsample = bool, trellis_quant = bool, overshoot_deringing = bool, optimize_scans = bool, quant_table = int, strip = bool, background = list[float])
      
      :param int Q: Q factor
      :param str profile: ICC profile to embed
      :param bool optimize_coding: Compute optimal Huffman coding tables
      :param bool interlace: Generate an interlaced (progressive) jpeg
      :param bool no_subsample: Disable chroma subsample
      :param bool trellis_quant: Apply trellis quantisation to each 8x8 block
      :param bool overshoot_deringing: Apply overshooting to samples with extreme values
      :param bool optimize_scans: Split the spectrum of DCT coefficients into separate scans
      :param int quant_table: Use predefined quantization table with given index
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: str
      :raises Error:
      
   .. method:: jpegsave_mime(Q = int, profile = str, optimize_coding = bool, interlace = bool, no_subsample = bool, trellis_quant = bool, overshoot_deringing = bool, optimize_scans = bool, quant_table = int, strip = bool, background = list[float])
      
      Save image to jpeg mime.
      
      Example:
           = in.jpegsave_mime(Q = int, profile = str, optimize_coding = bool, interlace = bool, no_subsample = bool, trellis_quant = bool, overshoot_deringing = bool, optimize_scans = bool, quant_table = int, strip = bool, background = list[float])
      
      :param int Q: Q factor
      :param str profile: ICC profile to embed
      :param bool optimize_coding: Compute optimal Huffman coding tables
      :param bool interlace: Generate an interlaced (progressive) jpeg
      :param bool no_subsample: Disable chroma subsample
      :param bool trellis_quant: Apply trellis quantisation to each 8x8 block
      :param bool overshoot_deringing: Apply overshooting to samples with extreme values
      :param bool optimize_scans: Split the spectrum of DCT coefficients into separate scans
      :param int quant_table: Use predefined quantization table with given index
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: list[]
      :raises Error:
      
   .. method:: labelregions()
      
      Label regions in an image.
      
      Example:
          mask = in.labelregions()
      
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: linear(a, b, uchar = bool)
      
      Calculate (a * in + b).
      
      Example:
          out = in.linear(a, b, uchar = bool)
      
      :param list[float] a: Multiply by this
      :param list[float] b: Add this
      :param bool uchar: Output should be uchar
      :rtype: Image
      :raises Error:
      
   .. method:: linecache(tile_height = int, access = str, threaded = bool, persistent = bool)
      
      Cache an image as a set of lines.
      
      Example:
          out = in.linecache(tile_height = int, access = str, threaded = bool, persistent = bool)
      
      :param int tile_height: Tile height in pixels
      :param str access: Expected access pattern
      :param bool threaded: Allow threaded access
      :param bool persistent: Keep cache between evaluations
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: logmat(sigma, min_ampl, separable = bool, precision = str)
      
      Make a laplacian of gaussian image.
      
      Example:
          out = pyvips.Image.logmat(sigma, min_ampl, separable = bool, precision = str)
      
      :param float sigma: Radius of Logmatian
      :param float min_ampl: Minimum amplitude of Logmatian
      :param bool separable: Generate separable Logmatian
      :param str precision: Generate with this precision
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: magickload(filename, density = str, page = int, n = int, disc = bool, access = str, fail = bool)
      
      Load file with ImageMagick.
      
      Example:
          out = pyvips.Image.magickload(filename, density = str, page = int, n = int, disc = bool, access = str, fail = bool)
      
      :param str filename: Filename to load from
      :param str density: Canvas resolution for rendering vector formats like SVG
      :param int page: Load this page from the file
      :param int n: Load this many pages
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param bool fail: Fail on first error
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. staticmethod:: magickload_buffer(buffer, density = str, page = int, n = int, disc = bool, access = str, fail = bool)
      
      Load buffer with ImageMagick.
      
      Example:
          out = pyvips.Image.magickload_buffer(buffer, density = str, page = int, n = int, disc = bool, access = str, fail = bool)
      
      :param str buffer: Buffer to load from
      :param str density: Canvas resolution for rendering vector formats like SVG
      :param int page: Load this page from the file
      :param int n: Load this many pages
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param bool fail: Fail on first error
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: mapim(index, interpolate = GObject)
      
      Resample with an mapim image.
      
      Example:
          out = in.mapim(index, interpolate = GObject)
      
      :param Image index: Index pixels with this
      :param GObject interpolate: Interpolate pixels with this
      :rtype: Image
      :raises Error:
      
   .. method:: maplut(lut, band = int)
      
      Map an image though a lut.
      
      Example:
          out = in.maplut(lut, band = int)
      
      :param Image lut: Look-up table image
      :param int band: apply one-band lut to this band of in
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: mask_butterworth(width, height, order, frequency_cutoff, amplitude_cutoff, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      Make a butterworth filter.
      
      Example:
          out = pyvips.Image.mask_butterworth(width, height, order, frequency_cutoff, amplitude_cutoff, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param float order: Filter order
      :param float frequency_cutoff: Frequency cutoff
      :param float amplitude_cutoff: Amplitude cutoff
      :param bool uchar: Output an unsigned char image
      :param bool nodc: Remove DC component
      :param bool reject: Invert the sense of the filter
      :param bool optical: Rotate quadrants to optical space
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: mask_butterworth_band(width, height, order, frequency_cutoff_x, frequency_cutoff_y, radius, amplitude_cutoff, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      Make a butterworth_band filter.
      
      Example:
          out = pyvips.Image.mask_butterworth_band(width, height, order, frequency_cutoff_x, frequency_cutoff_y, radius, amplitude_cutoff, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param float order: Filter order
      :param float frequency_cutoff_x: Frequency cutoff x
      :param float frequency_cutoff_y: Frequency cutoff y
      :param float radius: radius of circle
      :param float amplitude_cutoff: Amplitude cutoff
      :param bool uchar: Output an unsigned char image
      :param bool nodc: Remove DC component
      :param bool reject: Invert the sense of the filter
      :param bool optical: Rotate quadrants to optical space
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: mask_butterworth_ring(width, height, order, frequency_cutoff, amplitude_cutoff, ringwidth, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      Make a butterworth ring filter.
      
      Example:
          out = pyvips.Image.mask_butterworth_ring(width, height, order, frequency_cutoff, amplitude_cutoff, ringwidth, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param float order: Filter order
      :param float frequency_cutoff: Frequency cutoff
      :param float amplitude_cutoff: Amplitude cutoff
      :param float ringwidth: Ringwidth
      :param bool uchar: Output an unsigned char image
      :param bool nodc: Remove DC component
      :param bool reject: Invert the sense of the filter
      :param bool optical: Rotate quadrants to optical space
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: mask_fractal(width, height, fractal_dimension, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      Make fractal filter.
      
      Example:
          out = pyvips.Image.mask_fractal(width, height, fractal_dimension, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param float fractal_dimension: Fractal dimension
      :param bool uchar: Output an unsigned char image
      :param bool nodc: Remove DC component
      :param bool reject: Invert the sense of the filter
      :param bool optical: Rotate quadrants to optical space
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: mask_gaussian(width, height, frequency_cutoff, amplitude_cutoff, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      Make a gaussian filter.
      
      Example:
          out = pyvips.Image.mask_gaussian(width, height, frequency_cutoff, amplitude_cutoff, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param float frequency_cutoff: Frequency cutoff
      :param float amplitude_cutoff: Amplitude cutoff
      :param bool uchar: Output an unsigned char image
      :param bool nodc: Remove DC component
      :param bool reject: Invert the sense of the filter
      :param bool optical: Rotate quadrants to optical space
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: mask_gaussian_band(width, height, frequency_cutoff_x, frequency_cutoff_y, radius, amplitude_cutoff, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      Make a gaussian filter.
      
      Example:
          out = pyvips.Image.mask_gaussian_band(width, height, frequency_cutoff_x, frequency_cutoff_y, radius, amplitude_cutoff, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param float frequency_cutoff_x: Frequency cutoff x
      :param float frequency_cutoff_y: Frequency cutoff y
      :param float radius: radius of circle
      :param float amplitude_cutoff: Amplitude cutoff
      :param bool uchar: Output an unsigned char image
      :param bool nodc: Remove DC component
      :param bool reject: Invert the sense of the filter
      :param bool optical: Rotate quadrants to optical space
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: mask_gaussian_ring(width, height, frequency_cutoff, amplitude_cutoff, ringwidth, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      Make a gaussian ring filter.
      
      Example:
          out = pyvips.Image.mask_gaussian_ring(width, height, frequency_cutoff, amplitude_cutoff, ringwidth, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param float frequency_cutoff: Frequency cutoff
      :param float amplitude_cutoff: Amplitude cutoff
      :param float ringwidth: Ringwidth
      :param bool uchar: Output an unsigned char image
      :param bool nodc: Remove DC component
      :param bool reject: Invert the sense of the filter
      :param bool optical: Rotate quadrants to optical space
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: mask_ideal(width, height, frequency_cutoff, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      Make an ideal filter.
      
      Example:
          out = pyvips.Image.mask_ideal(width, height, frequency_cutoff, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param float frequency_cutoff: Frequency cutoff
      :param bool uchar: Output an unsigned char image
      :param bool nodc: Remove DC component
      :param bool reject: Invert the sense of the filter
      :param bool optical: Rotate quadrants to optical space
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: mask_ideal_band(width, height, frequency_cutoff_x, frequency_cutoff_y, radius, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      Make an ideal band filter.
      
      Example:
          out = pyvips.Image.mask_ideal_band(width, height, frequency_cutoff_x, frequency_cutoff_y, radius, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param float frequency_cutoff_x: Frequency cutoff x
      :param float frequency_cutoff_y: Frequency cutoff y
      :param float radius: radius of circle
      :param bool uchar: Output an unsigned char image
      :param bool nodc: Remove DC component
      :param bool reject: Invert the sense of the filter
      :param bool optical: Rotate quadrants to optical space
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: mask_ideal_ring(width, height, frequency_cutoff, ringwidth, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      Make an ideal ring filter.
      
      Example:
          out = pyvips.Image.mask_ideal_ring(width, height, frequency_cutoff, ringwidth, uchar = bool, nodc = bool, reject = bool, optical = bool)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param float frequency_cutoff: Frequency cutoff
      :param float ringwidth: Ringwidth
      :param bool uchar: Output an unsigned char image
      :param bool nodc: Remove DC component
      :param bool reject: Invert the sense of the filter
      :param bool optical: Rotate quadrants to optical space
      :rtype: Image
      :raises Error:
      
   .. method:: match(sec, xr1, yr1, xs1, ys1, xr2, yr2, xs2, ys2, hwindow = int, harea = int, search = bool, interpolate = GObject)
      
      First-order match of two images.
      
      Example:
          out = ref.match(sec, xr1, yr1, xs1, ys1, xr2, yr2, xs2, ys2, hwindow = int, harea = int, search = bool, interpolate = GObject)
      
      :param Image sec: Secondary image
      :param int xr1: Position of first reference tie-point
      :param int yr1: Position of first reference tie-point
      :param int xs1: Position of first secondary tie-point
      :param int ys1: Position of first secondary tie-point
      :param int xr2: Position of second reference tie-point
      :param int yr2: Position of second reference tie-point
      :param int xs2: Position of second secondary tie-point
      :param int ys2: Position of second secondary tie-point
      :param int hwindow: Half window size
      :param int harea: Half area size
      :param bool search: Search to improve tie-points
      :param GObject interpolate: Interpolate pixels with this
      :rtype: Image
      :raises Error:
      
   .. method:: math(math)
      
      Apply a math operation to an image.
      
      Example:
          out = in.math(math)
      
      :param str math: math to perform
      :rtype: Image
      :raises Error:
      
   .. method:: math2(right, math2)
      
      Binary math operations.
      
      Example:
          out = left.math2(right, math2)
      
      :param Image right: Right-hand image argument
      :param str math2: math to perform
      :rtype: Image
      :raises Error:
      
   .. method:: math2_const(math2, c)
      
      Binary math operations with a constant.
      
      Example:
          out = in.math2_const(math2, c)
      
      :param str math2: math to perform
      :param list[float] c: Array of constants
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: matload(filename, disc = bool, access = str, fail = bool)
      
      Load mat from file.
      
      Example:
          out = pyvips.Image.matload(filename, disc = bool, access = str, fail = bool)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param bool fail: Fail on first error
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. staticmethod:: matrixload(filename, disc = bool, access = str, fail = bool)
      
      Load matrix from file.
      
      Example:
          out = pyvips.Image.matrixload(filename, disc = bool, access = str, fail = bool)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param bool fail: Fail on first error
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: matrixprint(strip = bool, background = list[float])
      
      Print matrix.
      
      Example:
           = in.matrixprint(strip = bool, background = list[float])
      
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: list[]
      :raises Error:
      
   .. method:: matrixsave(filename, strip = bool, background = list[float])
      
      Save image to matrix file.
      
      Example:
           = in.matrixsave(filename, strip = bool, background = list[float])
      
      :param str filename: Filename to save to
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: list[]
      :raises Error:
      
   .. method:: max(size = int)
      
      Find image maximum.
      
      Example:
          out = in.max(size = int)
      
      :param int size: Number of maximum values to find
      :rtype: float or list[float, Dict[str, mixed]]
      :raises Error:
      
   .. method:: measure(h, v, left = int, top = int, width = int, height = int)
      
      Measure a set of patches on a color chart.
      
      Example:
          out = in.measure(h, v, left = int, top = int, width = int, height = int)
      
      :param int h: Number of patches across chart
      :param int v: Number of patches down chart
      :param int left: Left edge of extract area
      :param int top: Top edge of extract area
      :param int width: Width of extract area
      :param int height: Height of extract area
      :rtype: Image
      :raises Error:
      
   .. method:: merge(sec, direction, dx, dy, mblend = int)
      
      Merge two images.
      
      Example:
          out = ref.merge(sec, direction, dx, dy, mblend = int)
      
      :param Image sec: Secondary image
      :param str direction: Horizontal or vertcial merge
      :param int dx: Horizontal displacement from sec to ref
      :param int dy: Vertical displacement from sec to ref
      :param int mblend: Maximum blend size
      :rtype: Image
      :raises Error:
      
   .. method:: min(size = int)
      
      Find image minimum.
      
      Example:
          out = in.min(size = int)
      
      :param int size: Number of minimum values to find
      :rtype: float or list[float, Dict[str, mixed]]
      :raises Error:
      
   .. method:: morph(mask, morph)
      
      Morphology operation.
      
      Example:
          out = in.morph(mask, morph)
      
      :param Image mask: Input matrix image
      :param str morph: Morphological operation to perform
      :rtype: Image
      :raises Error:
      
   .. method:: mosaic(sec, direction, xref, yref, xsec, ysec, hwindow = int, harea = int, mblend = int, bandno = int)
      
      Mosaic two images.
      
      Example:
          out = ref.mosaic(sec, direction, xref, yref, xsec, ysec, hwindow = int, harea = int, mblend = int, bandno = int)
      
      :param Image sec: Secondary image
      :param str direction: Horizontal or vertcial mosaic
      :param int xref: Position of reference tie-point
      :param int yref: Position of reference tie-point
      :param int xsec: Position of secondary tie-point
      :param int ysec: Position of secondary tie-point
      :param int hwindow: Half window size
      :param int harea: Half area size
      :param int mblend: Maximum blend size
      :param int bandno: Band to search for features on
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: mosaic1(sec, direction, xr1, yr1, xs1, ys1, xr2, yr2, xs2, ys2, hwindow = int, harea = int, search = bool, interpolate = GObject, mblend = int, bandno = int)
      
      First-order mosaic of two images.
      
      Example:
          out = ref.mosaic1(sec, direction, xr1, yr1, xs1, ys1, xr2, yr2, xs2, ys2, hwindow = int, harea = int, search = bool, interpolate = GObject, mblend = int, bandno = int)
      
      :param Image sec: Secondary image
      :param str direction: Horizontal or vertcial mosaic
      :param int xr1: Position of first reference tie-point
      :param int yr1: Position of first reference tie-point
      :param int xs1: Position of first secondary tie-point
      :param int ys1: Position of first secondary tie-point
      :param int xr2: Position of second reference tie-point
      :param int yr2: Position of second reference tie-point
      :param int xs2: Position of second secondary tie-point
      :param int ys2: Position of second secondary tie-point
      :param int hwindow: Half window size
      :param int harea: Half area size
      :param bool search: Search to improve tie-points
      :param GObject interpolate: Interpolate pixels with this
      :param int mblend: Maximum blend size
      :param int bandno: Band to search for features on
      :rtype: Image
      :raises Error:
      
   .. method:: msb(band = int)
      
      Pick most-significant byte from an image.
      
      Example:
          out = in.msb(band = int)
      
      :param int band: Band to msb
      :rtype: Image
      :raises Error:
      
   .. method:: multiply(right)
      
      Multiply two images.
      
      Example:
          out = left.multiply(right)
      
      :param Image right: Right-hand image argument
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: openexrload(filename, disc = bool, access = str, fail = bool)
      
      Load an OpenEXR image.
      
      Example:
          out = pyvips.Image.openexrload(filename, disc = bool, access = str, fail = bool)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param bool fail: Fail on first error
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. staticmethod:: openslideload(filename, disc = bool, access = str, level = int, autocrop = bool, fail = bool, associated = str)
      
      Load file with OpenSlide.
      
      Example:
          out = pyvips.Image.openslideload(filename, disc = bool, access = str, level = int, autocrop = bool, fail = bool, associated = str)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param int level: Load this level from the file
      :param bool autocrop: Crop to image bounds
      :param bool fail: Fail on first error
      :param str associated: Load this associated image
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. staticmethod:: pdfload(filename, disc = bool, access = str, page = int, n = int, fail = bool, dpi = float, scale = float)
      
      Load PDF with libpoppler.
      
      Example:
          out = pyvips.Image.pdfload(filename, disc = bool, access = str, page = int, n = int, fail = bool, dpi = float, scale = float)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param int page: Load this page from the file
      :param int n: Load this many pages
      :param bool fail: Fail on first error
      :param float dpi: Render at this DPI
      :param float scale: Scale output by this factor
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. staticmethod:: pdfload_buffer(buffer, disc = bool, access = str, page = int, n = int, fail = bool, dpi = float, scale = float)
      
      Load PDF with libpoppler.
      
      Example:
          out = pyvips.Image.pdfload_buffer(buffer, disc = bool, access = str, page = int, n = int, fail = bool, dpi = float, scale = float)
      
      :param str buffer: Buffer to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param int page: Load this page from the file
      :param int n: Load this many pages
      :param bool fail: Fail on first error
      :param float dpi: Render at this DPI
      :param float scale: Scale output by this factor
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: percent(percent)
      
      Find threshold for percent of pixels.
      
      Example:
          threshold = in.percent(percent)
      
      :param float percent: Percent of pixels
      :rtype: int
      :raises Error:
      
   .. staticmethod:: perlin(width, height, cell_size = int, uchar = bool)
      
      Make a perlin noise image.
      
      Example:
          out = pyvips.Image.perlin(width, height, cell_size = int, uchar = bool)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param int cell_size: Size of Perlin cells
      :param bool uchar: Output an unsigned char image
      :rtype: Image
      :raises Error:
      
   .. method:: phasecor(in2)
      
      Calculate phase correlation.
      
      Example:
          out = in.phasecor(in2)
      
      :param Image in2: Second input image
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: pngload(filename, disc = bool, access = str, fail = bool)
      
      Load png from file.
      
      Example:
          out = pyvips.Image.pngload(filename, disc = bool, access = str, fail = bool)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param bool fail: Fail on first error
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. staticmethod:: pngload_buffer(buffer, disc = bool, access = str, fail = bool)
      
      Load png from buffer.
      
      Example:
          out = pyvips.Image.pngload_buffer(buffer, disc = bool, access = str, fail = bool)
      
      :param str buffer: Buffer to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param bool fail: Fail on first error
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: pngsave(filename, compression = int, interlace = bool, profile = str, filter = int, strip = bool, background = list[float])
      
      Save image to png file.
      
      Example:
           = in.pngsave(filename, compression = int, interlace = bool, profile = str, filter = int, strip = bool, background = list[float])
      
      :param str filename: Filename to save to
      :param int compression: Compression factor
      :param bool interlace: Interlace image
      :param str profile: ICC profile to embed
      :param int filter: libpng row filter flag(s)
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: list[]
      :raises Error:
      
   .. method:: pngsave_buffer(compression = int, interlace = bool, profile = str, filter = int, strip = bool, background = list[float])
      
      Save image to png buffer.
      
      Example:
          buffer = in.pngsave_buffer(compression = int, interlace = bool, profile = str, filter = int, strip = bool, background = list[float])
      
      :param int compression: Compression factor
      :param bool interlace: Interlace image
      :param str profile: ICC profile to embed
      :param int filter: libpng row filter flag(s)
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: str
      :raises Error:
      
   .. staticmethod:: ppmload(filename, disc = bool, access = str, fail = bool)
      
      Load ppm from file.
      
      Example:
          out = pyvips.Image.ppmload(filename, disc = bool, access = str, fail = bool)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param bool fail: Fail on first error
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: ppmsave(filename, ascii = bool, squash = bool, strip = bool, background = list[float])
      
      Save image to ppm file.
      
      Example:
           = in.ppmsave(filename, ascii = bool, squash = bool, strip = bool, background = list[float])
      
      :param str filename: Filename to save to
      :param bool ascii: save as ascii
      :param bool squash: save as one bit
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: list[]
      :raises Error:
      
   .. method:: premultiply(max_alpha = float)
      
      Premultiply image alpha.
      
      Example:
          out = in.premultiply(max_alpha = float)
      
      :param float max_alpha: Maximum value of alpha channel
      :rtype: Image
      :raises Error:
      
   .. method:: profile()
      
      Find image profiles.
      
      Example:
          columns, rows = in.profile()
      
      :rtype: list[Image, Image]
      :raises Error:
      
   .. method:: project()
      
      Find image projections.
      
      Example:
          columns, rows = in.project()
      
      :rtype: list[Image, Image]
      :raises Error:
      
   .. method:: quadratic(coeff, interpolate = GObject)
      
      Resample an image with a quadratic transform.
      
      Example:
          out = in.quadratic(coeff, interpolate = GObject)
      
      :param Image coeff: Coefficient matrix
      :param GObject interpolate: Interpolate values with this
      :rtype: Image
      :raises Error:
      
   .. method:: rad2float()
      
      Unpack Radiance coding to float RGB.
      
      Example:
          out = in.rad2float()
      
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: radload(filename, disc = bool, access = str, fail = bool)
      
      Load a Radiance image from a file.
      
      Example:
          out = pyvips.Image.radload(filename, disc = bool, access = str, fail = bool)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param bool fail: Fail on first error
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: radsave(filename, strip = bool, background = list[float])
      
      Save image to Radiance file.
      
      Example:
           = in.radsave(filename, strip = bool, background = list[float])
      
      :param str filename: Filename to save to
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: list[]
      :raises Error:
      
   .. method:: radsave_buffer(strip = bool, background = list[float])
      
      Save image to Radiance buffer.
      
      Example:
          buffer = in.radsave_buffer(strip = bool, background = list[float])
      
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: str
      :raises Error:
      
   .. method:: rank(width, height, index)
      
      Rank filter.
      
      Example:
          out = in.rank(width, height, index)
      
      :param int width: Window width in pixels
      :param int height: Window height in pixels
      :param int index: Select pixel at index
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: rawload(filename, width, height, bands, disc = bool, access = str, fail = bool, offset = <unknown type>)
      
      Load raw data from a file.
      
      Example:
          out = pyvips.Image.rawload(filename, width, height, bands, disc = bool, access = str, fail = bool, offset = <unknown type>)
      
      :param str filename: Filename to load from
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param int bands: Number of bands in image
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param bool fail: Fail on first error
      :param <unknown type> offset: Offset in bytes from start of file
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: rawsave(filename, strip = bool, background = list[float])
      
      Save image to raw file.
      
      Example:
           = in.rawsave(filename, strip = bool, background = list[float])
      
      :param str filename: Filename to save to
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: list[]
      :raises Error:
      
   .. method:: rawsave_fd(fd, strip = bool, background = list[float])
      
      Write raw image to file descriptor.
      
      Example:
           = in.rawsave_fd(fd, strip = bool, background = list[float])
      
      :param int fd: File descriptor to write to
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: list[]
      :raises Error:
      
   .. method:: recomb(m)
      
      Linear recombination with matrix.
      
      Example:
          out = in.recomb(m)
      
      :param Image m: matrix of coefficients
      :rtype: Image
      :raises Error:
      
   .. method:: reduce(hshrink, vshrink, kernel = str, centre = bool)
      
      Reduce an image.
      
      Example:
          out = in.reduce(hshrink, vshrink, kernel = str, centre = bool)
      
      :param float hshrink: Horizontal shrink factor
      :param float vshrink: Vertical shrink factor
      :param str kernel: Resampling kernel
      :param bool centre: Use centre sampling convention
      :rtype: Image
      :raises Error:
      
   .. method:: reduceh(hshrink, kernel = str, centre = bool)
      
      Shrink an image horizontally.
      
      Example:
          out = in.reduceh(hshrink, kernel = str, centre = bool)
      
      :param float hshrink: Horizontal shrink factor
      :param str kernel: Resampling kernel
      :param bool centre: Use centre sampling convention
      :rtype: Image
      :raises Error:
      
   .. method:: reducev(vshrink, kernel = str, centre = bool)
      
      Shrink an image vertically.
      
      Example:
          out = in.reducev(vshrink, kernel = str, centre = bool)
      
      :param float vshrink: Vertical shrink factor
      :param str kernel: Resampling kernel
      :param bool centre: Use centre sampling convention
      :rtype: Image
      :raises Error:
      
   .. method:: relational(right, relational)
      
      Relational operation on two images.
      
      Example:
          out = left.relational(right, relational)
      
      :param Image right: Right-hand image argument
      :param str relational: relational to perform
      :rtype: Image
      :raises Error:
      
   .. method:: relational_const(relational, c)
      
      Relational operations against a constant.
      
      Example:
          out = in.relational_const(relational, c)
      
      :param str relational: relational to perform
      :param list[float] c: Array of constants
      :rtype: Image
      :raises Error:
      
   .. method:: remainder(right)
      
      Remainder after integer division of two images.
      
      Example:
          out = left.remainder(right)
      
      :param Image right: Right-hand image argument
      :rtype: Image
      :raises Error:
      
   .. method:: remainder_const(c)
      
      Remainder after integer division of an image and a constant.
      
      Example:
          out = in.remainder_const(c)
      
      :param list[float] c: Array of constants
      :rtype: Image
      :raises Error:
      
   .. method:: replicate(across, down)
      
      Replicate an image.
      
      Example:
          out = in.replicate(across, down)
      
      :param int across: Repeat this many times horizontally
      :param int down: Repeat this many times vertically
      :rtype: Image
      :raises Error:
      
   .. method:: resize(scale, kernel = str, centre = bool, vscale = float)
      
      Resize an image.
      
      Example:
          out = in.resize(scale, kernel = str, centre = bool, vscale = float)
      
      :param float scale: Scale image by this factor
      :param str kernel: Resampling kernel
      :param bool centre: Use centre sampling convention
      :param float vscale: Vertical scale image by this factor
      :rtype: Image
      :raises Error:
      
   .. method:: rot(angle)
      
      Rotate an image.
      
      Example:
          out = in.rot(angle)
      
      :param str angle: Angle to rotate image
      :rtype: Image
      :raises Error:
      
   .. method:: rot45(angle = str)
      
      Rotate an image.
      
      Example:
          out = in.rot45(angle = str)
      
      :param str angle: Angle to rotate image
      :rtype: Image
      :raises Error:
      
   .. method:: round(round)
      
      Perform a round function on an image.
      
      Example:
          out = in.round(round)
      
      :param str round: rounding operation to perform
      :rtype: Image
      :raises Error:
      
   .. method:: sRGB2HSV()
      
      Transform sRGB to HSV.
      
      Example:
          out = in.sRGB2HSV()
      
      :rtype: Image
      :raises Error:
      
   .. method:: sRGB2scRGB()
      
      Convert an sRGB image to scRGB.
      
      Example:
          out = in.sRGB2scRGB()
      
      :rtype: Image
      :raises Error:
      
   .. method:: scRGB2BW(depth = int)
      
      Convert scRGB to BW.
      
      Example:
          out = in.scRGB2BW(depth = int)
      
      :param int depth: Output device space depth in bits
      :rtype: Image
      :raises Error:
      
   .. method:: scRGB2XYZ()
      
      Transform scRGB to XYZ.
      
      Example:
          out = in.scRGB2XYZ()
      
      :rtype: Image
      :raises Error:
      
   .. method:: scRGB2sRGB(depth = int)
      
      Convert an scRGB image to sRGB.
      
      Example:
          out = in.scRGB2sRGB(depth = int)
      
      :param int depth: Output device space depth in bits
      :rtype: Image
      :raises Error:
      
   .. method:: sequential(tile_height = int)
      
      Check sequential access.
      
      Example:
          out = in.sequential(tile_height = int)
      
      :param int tile_height: Tile height in pixels
      :rtype: Image
      :raises Error:
      
   .. method:: sharpen(sigma = float, x1 = float, y2 = float, y3 = float, m1 = float, m2 = float)
      
      Unsharp masking for print.
      
      Example:
          out = in.sharpen(sigma = float, x1 = float, y2 = float, y3 = float, m1 = float, m2 = float)
      
      :param float sigma: Sigma of Gaussian
      :param float x1: Flat/jaggy threshold
      :param float y2: Maximum brightening
      :param float y3: Maximum darkening
      :param float m1: Slope for flat areas
      :param float m2: Slope for jaggy areas
      :rtype: Image
      :raises Error:
      
   .. method:: shrink(hshrink, vshrink)
      
      Shrink an image.
      
      Example:
          out = in.shrink(hshrink, vshrink)
      
      :param float hshrink: Horizontal shrink factor
      :param float vshrink: Vertical shrink factor
      :rtype: Image
      :raises Error:
      
   .. method:: shrinkh(hshrink)
      
      Shrink an image horizontally.
      
      Example:
          out = in.shrinkh(hshrink)
      
      :param int hshrink: Horizontal shrink factor
      :rtype: Image
      :raises Error:
      
   .. method:: shrinkv(vshrink)
      
      Shrink an image vertically.
      
      Example:
          out = in.shrinkv(vshrink)
      
      :param int vshrink: Vertical shrink factor
      :rtype: Image
      :raises Error:
      
   .. method:: sign()
      
      Unit vector of pixel.
      
      Example:
          out = in.sign()
      
      :rtype: Image
      :raises Error:
      
   .. method:: similarity(interpolate = GObject, scale = float, angle = float, odx = float, ody = float, idx = float, idy = float)
      
      Similarity transform of an image.
      
      Example:
          out = in.similarity(interpolate = GObject, scale = float, angle = float, odx = float, ody = float, idx = float, idy = float)
      
      :param GObject interpolate: Interpolate pixels with this
      :param float scale: Scale by this factor
      :param float angle: Rotate anticlockwise by this many degrees
      :param float odx: Horizontal output displacement
      :param float ody: Vertical output displacement
      :param float idx: Horizontal input displacement
      :param float idy: Vertical input displacement
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: sines(width, height, uchar = bool, hfreq = float, vfreq = float)
      
      Make a 2D sine wave.
      
      Example:
          out = pyvips.Image.sines(width, height, uchar = bool, hfreq = float, vfreq = float)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param bool uchar: Output an unsigned char image
      :param float hfreq: Horizontal spatial frequency
      :param float vfreq: Vertical spatial frequency
      :rtype: Image
      :raises Error:
      
   .. method:: smartcrop(width, height, interesting = str)
      
      Extract an area from an image.
      
      Example:
          out = input.smartcrop(width, height, interesting = str)
      
      :param int width: Width of extract area
      :param int height: Height of extract area
      :param str interesting: How to measure interestingness
      :rtype: Image
      :raises Error:
      
   .. method:: spcor(ref)
      
      Spatial correlation.
      
      Example:
          out = in.spcor(ref)
      
      :param Image ref: Input reference image
      :rtype: Image
      :raises Error:
      
   .. method:: spectrum()
      
      Make displayable power spectrum.
      
      Example:
          out = in.spectrum()
      
      :rtype: Image
      :raises Error:
      
   .. method:: stats()
      
      Find image average.
      
      Example:
          out = in.stats()
      
      :rtype: Image
      :raises Error:
      
   .. method:: stdif(width, height, s0 = float, b = float, m0 = float, a = float)
      
      Statistical difference.
      
      Example:
          out = in.stdif(width, height, s0 = float, b = float, m0 = float, a = float)
      
      :param int width: Window width in pixels
      :param int height: Window height in pixels
      :param float s0: New deviation
      :param float b: Weight of new deviation
      :param float m0: New mean
      :param float a: Weight of new mean
      :rtype: Image
      :raises Error:
      
   .. method:: subsample(xfac, yfac, point = bool)
      
      Subsample an image.
      
      Example:
          out = input.subsample(xfac, yfac, point = bool)
      
      :param int xfac: Horizontal subsample factor
      :param int yfac: Vertical subsample factor
      :param bool point: Point sample
      :rtype: Image
      :raises Error:
      
   .. method:: subtract(right)
      
      Subtract two images.
      
      Example:
          out = left.subtract(right)
      
      :param Image right: Right-hand image argument
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: sum(in)
      
      Sum an array of images.
      
      Example:
          out = pyvips.Image.sum(in)
      
      :param list[Image] in: Array of input images
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: svgload(filename, disc = bool, access = str, dpi = float, fail = bool, scale = float)
      
      Load SVG with rsvg.
      
      Example:
          out = pyvips.Image.svgload(filename, disc = bool, access = str, dpi = float, fail = bool, scale = float)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param float dpi: Render at this DPI
      :param bool fail: Fail on first error
      :param float scale: Scale output by this factor
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. staticmethod:: svgload(filename, disc = bool, access = str, dpi = float, fail = bool, scale = float)
      
      Load SVG with rsvg.
      
      Example:
          out = pyvips.Image.svgload(filename, disc = bool, access = str, dpi = float, fail = bool, scale = float)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param float dpi: Render at this DPI
      :param bool fail: Fail on first error
      :param float scale: Scale output by this factor
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. staticmethod:: svgload_buffer(buffer, disc = bool, access = str, dpi = float, fail = bool, scale = float)
      
      Load SVG with rsvg.
      
      Example:
          out = pyvips.Image.svgload_buffer(buffer, disc = bool, access = str, dpi = float, fail = bool, scale = float)
      
      :param str buffer: Buffer to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param float dpi: Render at this DPI
      :param bool fail: Fail on first error
      :param float scale: Scale output by this factor
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. staticmethod:: system(cmd_format, in = list[Image], out_format = str, in_format = str)
      
      Run an external command.
      
      Example:
           = pyvips.Image.system(cmd_format, in = list[Image], out_format = str, in_format = str)
      
      :param str cmd_format: Command to run
      :param list[Image] in: Array of input images
      :param str out_format: Format for output filename
      :param str in_format: Format for input filename
      :rtype: list[] or list[Dict[str, mixed]]
      :raises Error:
      
   .. staticmethod:: text(text, font = str, width = int, align = str, dpi = int, spacing = int)
      
      Make a text image.
      
      Example:
          out = pyvips.Image.text(text, font = str, width = int, align = str, dpi = int, spacing = int)
      
      :param str text: Text to render
      :param str font: Font to render with
      :param int width: Maximum image width in pixels
      :param str align: Align on the low, centre or high edge
      :param int dpi: DPI to render at
      :param int spacing: Line spacing
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: thumbnail(filename, width, height = int, size = str, auto_rotate = bool, crop = str, linear = bool, import_profile = str, export_profile = str)
      
      Generate thumbnail from file.
      
      Example:
          out = pyvips.Image.thumbnail(filename, width, height = int, size = str, auto_rotate = bool, crop = str, linear = bool, import_profile = str, export_profile = str)
      
      :param str filename: Filename to read from
      :param int width: Size to this width
      :param int height: Size to this height
      :param str size: Only upsize, only downsize, or both
      :param bool auto_rotate: Use orientation tags to rotate image upright
      :param str crop: Reduce to fill target rectangle, then crop
      :param bool linear: Reduce in linear light
      :param str import_profile: Fallback import profile
      :param str export_profile: Fallback export profile
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: thumbnail_buffer(buffer, width, height = int, size = str, auto_rotate = bool, crop = str, linear = bool, import_profile = str, export_profile = str)
      
      Generate thumbnail from buffer.
      
      Example:
          out = pyvips.Image.thumbnail_buffer(buffer, width, height = int, size = str, auto_rotate = bool, crop = str, linear = bool, import_profile = str, export_profile = str)
      
      :param str buffer: Buffer to load from
      :param int width: Size to this width
      :param int height: Size to this height
      :param str size: Only upsize, only downsize, or both
      :param bool auto_rotate: Use orientation tags to rotate image upright
      :param str crop: Reduce to fill target rectangle, then crop
      :param bool linear: Reduce in linear light
      :param str import_profile: Fallback import profile
      :param str export_profile: Fallback export profile
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: tiffload(filename, disc = bool, access = str, page = int, n = int, fail = bool, autorotate = bool)
      
      Load tiff from file.
      
      Example:
          out = pyvips.Image.tiffload(filename, disc = bool, access = str, page = int, n = int, fail = bool, autorotate = bool)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param int page: Load this page from the image
      :param int n: Load this many pages
      :param bool fail: Fail on first error
      :param bool autorotate: Rotate image using orientation tag
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. staticmethod:: tiffload_buffer(buffer, disc = bool, access = str, page = int, n = int, fail = bool, autorotate = bool)
      
      Load tiff from buffer.
      
      Example:
          out = pyvips.Image.tiffload_buffer(buffer, disc = bool, access = str, page = int, n = int, fail = bool, autorotate = bool)
      
      :param str buffer: Buffer to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param int page: Load this page from the image
      :param int n: Load this many pages
      :param bool fail: Fail on first error
      :param bool autorotate: Rotate image using orientation tag
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: tiffsave(filename, compression = str, Q = int, predictor = str, profile = str, tile = bool, tile_width = int, tile_height = int, pyramid = bool, miniswhite = bool, squash = bool, resunit = str, xres = float, yres = float, bigtiff = bool, properties = bool, strip = bool, background = list[float])
      
      Save image to tiff file.
      
      Example:
           = in.tiffsave(filename, compression = str, Q = int, predictor = str, profile = str, tile = bool, tile_width = int, tile_height = int, pyramid = bool, miniswhite = bool, squash = bool, resunit = str, xres = float, yres = float, bigtiff = bool, properties = bool, strip = bool, background = list[float])
      
      :param str filename: Filename to save to
      :param str compression: Compression for this file
      :param int Q: Q factor
      :param str predictor: Compression prediction
      :param str profile: ICC profile to embed
      :param bool tile: Write a tiled tiff
      :param int tile_width: Tile width in pixels
      :param int tile_height: Tile height in pixels
      :param bool pyramid: Write a pyramidal tiff
      :param bool miniswhite: Use 0 for white in 1-bit images
      :param bool squash: Squash images down to 1 bit
      :param str resunit: Resolution unit
      :param float xres: Horizontal resolution in pixels/mm
      :param float yres: Vertical resolution in pixels/mm
      :param bool bigtiff: Write a bigtiff image
      :param bool properties: Write a properties document to IMAGEDESCRIPTION
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: list[]
      :raises Error:
      
   .. method:: tiffsave_buffer(compression = str, Q = int, predictor = str, profile = str, tile = bool, tile_width = int, tile_height = int, pyramid = bool, miniswhite = bool, squash = bool, resunit = str, xres = float, yres = float, bigtiff = bool, properties = bool, strip = bool, background = list[float])
      
      Save image to tiff buffer.
      
      Example:
          buffer = in.tiffsave_buffer(compression = str, Q = int, predictor = str, profile = str, tile = bool, tile_width = int, tile_height = int, pyramid = bool, miniswhite = bool, squash = bool, resunit = str, xres = float, yres = float, bigtiff = bool, properties = bool, strip = bool, background = list[float])
      
      :param str compression: Compression for this file
      :param int Q: Q factor
      :param str predictor: Compression prediction
      :param str profile: ICC profile to embed
      :param bool tile: Write a tiled tiff
      :param int tile_width: Tile width in pixels
      :param int tile_height: Tile height in pixels
      :param bool pyramid: Write a pyramidal tiff
      :param bool miniswhite: Use 0 for white in 1-bit images
      :param bool squash: Squash images down to 1 bit
      :param str resunit: Resolution unit
      :param float xres: Horizontal resolution in pixels/mm
      :param float yres: Vertical resolution in pixels/mm
      :param bool bigtiff: Write a bigtiff image
      :param bool properties: Write a properties document to IMAGEDESCRIPTION
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: str
      :raises Error:
      
   .. method:: tilecache(tile_width = int, tile_height = int, max_tiles = int, access = str, threaded = bool, persistent = bool)
      
      Cache an image as a set of tiles.
      
      Example:
          out = in.tilecache(tile_width = int, tile_height = int, max_tiles = int, access = str, threaded = bool, persistent = bool)
      
      :param int tile_width: Tile width in pixels
      :param int tile_height: Tile height in pixels
      :param int max_tiles: Maximum number of tiles to cache
      :param str access: Expected access pattern
      :param bool threaded: Allow threaded access
      :param bool persistent: Keep cache between evaluations
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: tonelut(in_max = int, out_max = int, Lb = float, Lw = float, Ps = float, Pm = float, Ph = float, S = float, M = float, H = float)
      
      Build a look-up table.
      
      Example:
          out = pyvips.Image.tonelut(in_max = int, out_max = int, Lb = float, Lw = float, Ps = float, Pm = float, Ph = float, S = float, M = float, H = float)
      
      :param int in_max: Size of LUT to build
      :param int out_max: Maximum value in output LUT
      :param float Lb: Lowest value in output
      :param float Lw: Highest value in output
      :param float Ps: Position of shadow
      :param float Pm: Position of mid-tones
      :param float Ph: Position of highlights
      :param float S: Adjust shadows by this much
      :param float M: Adjust mid-tones by this much
      :param float H: Adjust highlights by this much
      :rtype: Image
      :raises Error:
      
   .. method:: unpremultiply(max_alpha = float)
      
      Unpremultiply image alpha.
      
      Example:
          out = in.unpremultiply(max_alpha = float)
      
      :param float max_alpha: Maximum value of alpha channel
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: vipsload(filename, disc = bool, access = str, fail = bool)
      
      Load vips from file.
      
      Example:
          out = pyvips.Image.vipsload(filename, disc = bool, access = str, fail = bool)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param bool fail: Fail on first error
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: vipssave(filename, strip = bool, background = list[float])
      
      Save image to vips file.
      
      Example:
           = in.vipssave(filename, strip = bool, background = list[float])
      
      :param str filename: Filename to save to
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: list[]
      :raises Error:
      
   .. staticmethod:: webpload(filename, disc = bool, access = str, shrink = int, fail = bool)
      
      Load webp from file.
      
      Example:
          out = pyvips.Image.webpload(filename, disc = bool, access = str, shrink = int, fail = bool)
      
      :param str filename: Filename to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param int shrink: Shrink factor on load
      :param bool fail: Fail on first error
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. staticmethod:: webpload_buffer(buffer, disc = bool, access = str, shrink = int, fail = bool)
      
      Load webp from buffer.
      
      Example:
          out = pyvips.Image.webpload_buffer(buffer, disc = bool, access = str, shrink = int, fail = bool)
      
      :param str buffer: Buffer to load from
      :param bool disc: Open to disc
      :param str access: Required access pattern for this file
      :param int shrink: Shrink factor on load
      :param bool fail: Fail on first error
      :rtype: Image or list[Image, Dict[str, mixed]]
      :raises Error:
      
   .. method:: webpsave(filename, Q = int, lossless = bool, preset = str, smart_subsample = bool, near_lossless = bool, alpha_q = int, strip = bool, background = list[float])
      
      Save image to webp file.
      
      Example:
           = in.webpsave(filename, Q = int, lossless = bool, preset = str, smart_subsample = bool, near_lossless = bool, alpha_q = int, strip = bool, background = list[float])
      
      :param str filename: Filename to save to
      :param int Q: Q factor
      :param bool lossless: enable lossless compression
      :param str preset: Preset for lossy compression
      :param bool smart_subsample: Enable high quality chroma subsampling
      :param bool near_lossless: Enable preprocessing in lossless mode (uses Q)
      :param int alpha_q: Change alpha plane fidelity for lossy compression
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: list[]
      :raises Error:
      
   .. method:: webpsave_buffer(Q = int, lossless = bool, preset = str, smart_subsample = bool, near_lossless = bool, alpha_q = int, strip = bool, background = list[float])
      
      Save image to webp buffer.
      
      Example:
          buffer = in.webpsave_buffer(Q = int, lossless = bool, preset = str, smart_subsample = bool, near_lossless = bool, alpha_q = int, strip = bool, background = list[float])
      
      :param int Q: Q factor
      :param bool lossless: enable lossless compression
      :param str preset: Preset for lossy compression
      :param bool smart_subsample: Enable high quality chroma subsampling
      :param bool near_lossless: Enable preprocessing in lossless mode (uses Q)
      :param int alpha_q: Change alpha plane fidelity for lossy compression
      :param bool strip: Strip all metadata from image
      :param list[float] background: Background value
      :rtype: str
      :raises Error:
      
   .. staticmethod:: worley(width, height, cell_size = int)
      
      Make a worley noise image.
      
      Example:
          out = pyvips.Image.worley(width, height, cell_size = int)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param int cell_size: Size of Worley cells
      :rtype: Image
      :raises Error:
      
   .. method:: wrap(x = int, y = int)
      
      Wrap image origin.
      
      Example:
          out = in.wrap(x = int, y = int)
      
      :param int x: Left edge of input in output
      :param int y: Top edge of input in output
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: xyz(width, height, csize = int, dsize = int, esize = int)
      
      Make an image where pixel values are coordinates.
      
      Example:
          out = pyvips.Image.xyz(width, height, csize = int, dsize = int, esize = int)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param int csize: Size of third dimension
      :param int dsize: Size of fourth dimension
      :param int esize: Size of fifth dimension
      :rtype: Image
      :raises Error:
      
   .. staticmethod:: zone(width, height, uchar = bool)
      
      Make a zone plate.
      
      Example:
          out = pyvips.Image.zone(width, height, uchar = bool)
      
      :param int width: Image width in pixels
      :param int height: Image height in pixels
      :param bool uchar: Output an unsigned char image
      :rtype: Image
      :raises Error:
      
   .. method:: zoom(xfac, yfac)
      
      Zoom an image.
      
      Example:
          out = input.zoom(xfac, yfac)
      
      :param int xfac: Horizontal zoom factor
      :param int yfac: Vertical zoom factor
      :rtype: Image
      :raises Error:
      
